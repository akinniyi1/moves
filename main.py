import os import re import ssl import logging import yt_dlp import mimetypes import requests import ffmpeg import asyncpg from datetime import datetime, timedelta
from aiohttp import web from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup from telegram.ext import ( Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters )
Bypass SSL verification (fixes yt-dlp cert errors)
ssl._create_default_https_context = ssl._create_unverified_context
logging.basicConfig(level=logging.INFO)
Environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN") APP_URL = os.getenv("RENDER_EXTERNAL_URL") PORT = int(os.getenv("PORT", 10000)) ADMIN_ID = 1378825382 DATABASE_URL = os.getenv("DATABASE_URL")
application = Application.builder().token(BOT_TOKEN).build() db_pool = None
----------- PostgreSQL Helpers -----------
async def init_db(): global db_pool db_pool = await asyncpg.create_pool(DATABASE_URL) async with db_pool.acquire() as conn: await conn.execute(""" CREATE TABLE IF NOT EXISTS users ( user_id BIGINT PRIMARY KEY, username TEXT, plan TEXT DEFAULT 'free', downloads JSONB DEFAULT '{}', expires DATE ) """)
async def get_user(user_id): async with db_pool.acquire() as conn: row = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id) if not row: await conn.execute( "INSERT INTO users (user_id, plan, downloads) VALUES ($1, 'free', '{}')", user_id ) return {"plan": "free", "downloads": {}, "username": "", "expires": None} return dict(row)
async def update_user(user_id, **kwargs): keys = [] values = [] for i, (k, v) in enumerate(kwargs.items()): keys.append(f"{k} = ${i+2}") values.append(v) query = f"UPDATE users SET {', '.join(keys)} WHERE user_id = $1" async with db_pool.acquire() as conn: await conn.execute(query, user_id, *values)
async def get_total_users(): async with db_pool.acquire() as conn: return await conn.fetchval("SELECT COUNT(*) FROM users")
async def get_user_by_name(name): async with db_pool.acquire() as conn: row = await conn.fetchrow("SELECT * FROM users WHERE LOWER(username) = LOWER($1)", name) return dict(row) if row else None
----------- Business Logic -----------
def is_valid_url(text): return re.match(r'https?://', text)
def convert_to_audio(video_path, audio_path): try: ffmpeg.input(video_path).output(audio_path, format='mp3').run(overwrite_output=True) return True except Exception as e: logging.error(f"Audio conversion failed: {e}") return False
async def can_download(user_id): user = await get_user(user_id) today = datetime.utcnow().strftime("%Y-%m-%d") downloads_today = user["downloads"].get(today, 0) if user["plan"] == "free": return downloads_today < 3 elif user["expires"] and user["expires"] < datetime.utcnow().date(): await update_user(user_id, plan="free", expires=None) return downloads_today < 3 return True
async def log_download(user_id): user = await get_user(user_id) downloads = user["downloads"] today = datetime.utcnow().strftime("%Y-%m-%d") downloads[today] = downloads.get(today, 0) + 1 await update_user(user_id, downloads=downloads)
----------- Handlers -----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user await update_user(user.id, username=user.first_name or "")
keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("\U0001F464 View Profile", callback_data="profile")], [InlineKeyboardButton("\U0001F465 Total Users", callback_data="total_users")] if user.id == ADMIN_ID else [] ]) await update.message.reply_text( f"\U0001F44B Hello {user.first_name or 'there'}! Send me a video link to download.\n\n" "\U0001F3B5 After download, you can convert it to audio.\n" "\U0001F9FE You can also check your plan via 'View Profile'.", reply_markup=keyboard ) 
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE): url = update.message.text.strip() user = update.effective_user
if not is_valid_url(url): await update.message.reply_text("‚ùå That doesn't look like a valid link.") return if not await can_download(user.id): await update.message.reply_text("‚õî You've reached your daily limit for downloads.") return status_msg = await update.message.reply_text("üì• Downloading video...") video_filename = "video.mp4" progress_state = {'last_percent': 0} def progress_hook(d): if d['status'] == 'downloading': total = d.get('_total_bytes_estimate') or d.get('total_bytes') or 0 downloaded = d.get('downloaded_bytes') or 0 if total > 0: percent = int(downloaded * 100 / total) if percent - progress_state['last_percent'] >= 10: progress_state['last_percent'] = percent context.application.create_task( status_msg.edit_text(f"üì¶ Downloading... {percent}%") ) ydl_opts = { 'progress_hooks': [progress_hook], 'outtmpl': video_filename, 'format': 'bestvideo+bestaudio/best', 'merge_output_format': 'mp4', 'noplaylist': True, 'quiet': True, 'geo_bypass': True, 'nocheckcertificate': True, 'http_headers': {'User-Agent': 'Mozilla/5.0'}, 'postprocessors': [{ 'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4' }] } try: with yt_dlp.YoutubeDL(ydl_opts) as ydl: ydl.download([url]) await log_download(user.id) await status_msg.edit_text("‚úÖ Download complete.") with open(video_filename, 'rb') as f: keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("\U0001F3B5 Convert to Audio", callback_data=f"convert_audio:{video_filename}")] ]) await update.message.reply_video(f, caption="\U0001F389 Here's your video!", reply_markup=keyboard) except Exception as e: logging.error(f"Download failed: {e}") await status_msg.edit_text("‚ùå Failed to download this video.") 
async def handle_audio_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query await query.answer() if not query.data.startswith("convert_audio:"): return
video_path = query.data.split(":", 1)[1] audio_path = "audio.mp3" if not os.path.exists(video_path): await query.edit_message_caption("‚ùå Video file not found.") return success = convert_to_audio(video_path, audio_path) if not success: await query.edit_message_caption("‚ùå Audio conversion failed.") return with open(audio_path, 'rb') as f: await query.message.reply_audio(f, caption="\U0001F3A7 Here is the audio version!") os.remove(video_path) os.remove(audio_path) 
async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query user_id = query.from_user.id data = query.data await query.answer()
if data == "profile": user = await get_user(user_id) plan = user["plan"] expires = user.get("expires") expiry_text = f"\n‚è≥ Expires: {expires}" if expires else "" await query.message.reply_text( f"\U0001F464 Profile for {user.get('username', '')}\n" f"\U0001F4BC Plan: {plan}{expiry_text}" ) elif data == "total_users" and user_id == ADMIN_ID: total = await get_total_users() await query.message.reply_text(f"\U0001F465 Total users: {total}") elif data.startswith("upgrade:"): _, username, days = data.split(":") user = await get_user_by_name(username) if not user: await query.message.reply_text("‚ùå User not found.") return expiry = (datetime.utcnow() + timedelta(days=int(days))).date() await update_user(user["user_id"], plan="paid", expires=expiry) await query.message.reply_text(f"‚úÖ {username} upgraded for {days} days.") 
async def upgrade_user(update: Update, context: ContextTypes.DEFAULT_TYPE): if update.effective_user.id != ADMIN_ID: await update.message.reply_text("‚õî Not authorized.") return
if len(context.args) != 1: await update.message.reply_text("Usage: /upgrade <username>") return username = context.args[0] keyboard = InlineKeyboardMarkup([ [ InlineKeyboardButton("5 Days", callback_data=f"upgrade:{username}:5"), InlineKeyboardButton("10 Days", callback_data=f"upgrade:{username}:10"), InlineKeyboardButton("30 Days", callback_data=f"upgrade:{username}:30") ] ]) await update.message.reply_text(f"Select upgrade duration for {username}:", reply_markup=keyboard) 
----------- Webhook Setup -----------
web_app = web.Application()
async def webhook_handler(request): try: data = await request.json() update = Update.de_json(data, application.bot) await application.update_queue.put(update) except Exception as e: logging.error(f"Webhook error: {e}") return web.Response(text="ok")
web_app.router.add_post("/webhook", webhook_handler)
async def on_startup(app): await init_db() await application.initialize() await application.start() webhook_url = f"{APP_URL}/webhook" await application.bot.set_webhook(webhook_url) logging.info(f"‚úÖ Webhook set: {webhook_url}")
async def on_cleanup(app): await application.stop() await application.shutdown()
web_app.on_startup.append(on_startup) web_app.on_cleanup.append(on_cleanup)
----------- Register Handlers -----------
application.add_handler(CommandHandler("start", start)) application.add_handler(CommandHandler("upgrade", upgrade_user)) application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video)) application.add_handler(CallbackQueryHandler(handle_audio_callback, pattern="^convert_audio:")) application.add_handler(CallbackQueryHandler(handle_inline_buttons))
----------- Run -----------
if name == "main": web.run_app(web_app, port=PORT)
